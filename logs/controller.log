2023-09-28 13:35:09 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 13:35:09"}'
}
2023-09-28 13:36:27 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 13:36:27"}'
}
2023-09-28 13:38:31 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 13:38:31"}'
}
2023-09-28 13:39:15 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 13:39:15"}'
}
2023-09-28 13:40:12 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 13:40:12"}'
}
2023-09-28 13:47:13 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 13:47:13"}'
}
2023-09-28 13:48:02 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 13:48:02"}'
}
2023-09-28 13:52:00 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 13:52:00"}'
}
2023-09-28 13:52:57 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 13:52:57"}'
}
2023-09-28 16:29:45 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 16:29:45"}'
}
2023-09-28 16:29:45 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 16:29:45"}'
}
2023-09-28 16:33:26 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 16:33:26"}'
}
2023-09-28 16:33:26 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 16:33:26"}'
}
2023-09-28 20:04:22 error: Error fetching credit score: Cannot read properties of undefined (reading 'businessID') {
  service: 'controller',
  stack: "TypeError: Cannot read properties of undefined (reading 'businessID')\n" +
    '    at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)\n' +
    '    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\n' +
    '    at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    TypeError: Cannot read properties of undefined (reading 'businessID')
        at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)
        at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)
        at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)
        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
  ],
  [Symbol(message)]: `{"level":"error","message":"Error fetching credit score: Cannot read properties of undefined (reading 'businessID')","service":"controller","stack":"TypeError: Cannot read properties of undefined (reading 'businessID')\\n    at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)\\n    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\\n    at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2023-09-28 20:04:22"}`
}
2023-09-28 20:04:22 error: Error fetching credit score: Cannot read properties of undefined (reading 'businessID') {
  service: 'controller',
  stack: "TypeError: Cannot read properties of undefined (reading 'businessID')\n" +
    '    at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)\n' +
    '    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\n' +
    '    at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    TypeError: Cannot read properties of undefined (reading 'businessID')
        at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)
        at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)
        at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)
        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
  ],
  [Symbol(message)]: `{"level":"error","message":"Error fetching credit score: Cannot read properties of undefined (reading 'businessID')","service":"controller","stack":"TypeError: Cannot read properties of undefined (reading 'businessID')\\n    at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)\\n    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\\n    at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2023-09-28 20:04:22"}`
}
2023-09-28 20:04:22 error: Error fetching credit score: Cannot read properties of undefined (reading 'businessID') {
  service: 'controller',
  stack: "TypeError: Cannot read properties of undefined (reading 'businessID')\n" +
    '    at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)\n' +
    '    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\n' +
    '    at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    TypeError: Cannot read properties of undefined (reading 'businessID')
        at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)
        at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)
        at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)
        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
  ],
  [Symbol(message)]: `{"level":"error","message":"Error fetching credit score: Cannot read properties of undefined (reading 'businessID')","service":"controller","stack":"TypeError: Cannot read properties of undefined (reading 'businessID')\\n    at getCreditScore (/home/musediq/Documents/duplo-backend/controllers/order.js:43:35)\\n    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\\n    at businessAuth (/home/musediq/Documents/duplo-backend/service/businessAuth.service.js:15:9)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2023-09-28 20:04:22"}`
}
2023-09-28 20:07:04 error: Error processing order: Cannot read properties of undefined (reading 'businessID') {
  service: 'controller',
  stack: "TypeError: Cannot read properties of undefined (reading 'businessID')\n" +
    '    at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)\n' +
    '    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\n' +
    '    at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    TypeError: Cannot read properties of undefined (reading 'businessID')
        at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)
        at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)
        at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)
        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
  ],
  [Symbol(message)]: `{"level":"error","message":"Error processing order: Cannot read properties of undefined (reading 'businessID')","service":"controller","stack":"TypeError: Cannot read properties of undefined (reading 'businessID')\\n    at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)\\n    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\\n    at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2023-09-28 20:07:04"}`
}
2023-09-28 20:07:04 error: Error processing order: Cannot read properties of undefined (reading 'businessID') {
  service: 'controller',
  stack: "TypeError: Cannot read properties of undefined (reading 'businessID')\n" +
    '    at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)\n' +
    '    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\n' +
    '    at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    TypeError: Cannot read properties of undefined (reading 'businessID')
        at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)
        at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)
        at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)
        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
  ],
  [Symbol(message)]: `{"level":"error","message":"Error processing order: Cannot read properties of undefined (reading 'businessID')","service":"controller","stack":"TypeError: Cannot read properties of undefined (reading 'businessID')\\n    at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)\\n    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\\n    at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2023-09-28 20:07:04"}`
}
2023-09-28 20:07:04 error: Error processing order: Cannot read properties of undefined (reading 'businessID') {
  service: 'controller',
  stack: "TypeError: Cannot read properties of undefined (reading 'businessID')\n" +
    '    at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)\n' +
    '    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\n' +
    '    at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    TypeError: Cannot read properties of undefined (reading 'businessID')
        at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)
        at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)
        at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)
        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
  ],
  [Symbol(message)]: `{"level":"error","message":"Error processing order: Cannot read properties of undefined (reading 'businessID')","service":"controller","stack":"TypeError: Cannot read properties of undefined (reading 'businessID')\\n    at processOrder (/home/musediq/Documents/duplo-backend/controllers/order.js:12:35)\\n    at Layer.handle [as handle_request] (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/home/musediq/Documents/duplo-backend/node_modules/express/lib/router/route.js:144:13)\\n    at departmentAuth (/home/musediq/Documents/duplo-backend/service/departmentAuth.service.js:15:9)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2023-09-28 20:07:04"}`
}
2023-09-28 20:08:11 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 20:08:11"}'
}
2023-09-28 20:08:11 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 20:08:11"}'
}
2023-09-28 20:46:21 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 20:46:21"}'
}
2023-09-28 20:46:21 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 20:46:21"}'
}
2023-09-28 21:03:08 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 21:03:08"}'
}
2023-09-28 21:03:08 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 21:03:08"}'
}
2023-09-28 21:47:45 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 21:47:45"}'
}
2023-09-28 21:47:45 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 21:47:45"}'
}
2023-09-28 21:51:46 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-28 21:51:46"}'
}
2023-09-28 21:51:46 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-28 21:51:46"}'
}
2023-09-29 03:04:40 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-29 03:04:40"}'
}
2023-09-29 03:04:40 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-29 03:04:40"}'
}
2023-09-29 03:05:19 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-29 03:05:19"}'
}
2023-09-29 03:05:19 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-29 03:05:19"}'
}
2023-09-29 03:09:19 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-29 03:09:19"}'
}
2023-09-29 03:09:19 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-29 03:09:19"}'
}
2023-09-29 03:21:46 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-29 03:21:46"}'
}
2023-09-29 03:21:46 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-29 03:21:46"}'
}
2023-09-29 03:23:04 error: read ECONNRESET {
  service: 'controller',
  syscall: 'read',
  code: 'ECONNRESET',
  errno: -104,
  name: 'Error',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.5.1',
      'Content-Length': '82',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'post',
    url: 'https://taxes.free.beeceptor.com/log-tax',
    data: '{"order_id":"651634ca16a4817fdd4e57f0","platform_code":"022","order_amount":30000}'
  },
  request: <ref *3> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [Function: handleRequestSocket]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'https:',
      path: '/log-tax',
      method: 'POST',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.5.1',
        'Content-Length': '82',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'taxes.free.beeceptor.com',
      port: '',
      agent: undefined,
      nativeProtocols: <ref *4> {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',         'BIND',       'CHECKOUT',
            'CONNECT',     'COPY',       'DELETE',
            'GET',         'HEAD',       'LINK',
            'LOCK',        'M-SEARCH',   'MERGE',
            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
            'MOVE',        'NOTIFY',     'OPTIONS',
            'PATCH',       'POST',       'PROPFIND',
            'PROPPATCH',   'PURGE',      'PUT',
            'REBIND',      'REPORT',     'SEARCH',
            'SOURCE',      'SUBSCRIBE',  'TRACE',
            'UNBIND',      'UNLINK',     'UNLOCK',
            'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: __node_internal_],
          validateHeaderValue: [Function: __node_internal_],
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'taxes.free.beeceptor.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    drain: [Function: ondrain]
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: true,
                  _parent: null,
                  _host: 'taxes.free.beeceptor.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: false,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '82',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *1],
                    _header: 'POST /log-tax HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.5.1\r\n' +
                      'Content-Length: 82\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: taxes.free.beeceptor.com\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *2],
                    socketPath: undefined,
                    method: 'POST',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    joinDuplicateHeaders: undefined,
                    path: '/log-tax',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: null,
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'taxes.free.beeceptor.com',
                    protocol: 'https:',
                    _redirectable: [Circular *3],
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
                      'content-length': [ 'Content-Length', '82' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'taxes.free.beeceptor.com' ]
                    },
                    [Symbol(errored)]: null,
                    [Symbol(kHighWaterMark)]: 16384,
                    [Symbol(kRejectNonStandardBodyWrites)]: false,
                    [Symbol(kUniqueHeaders)]: null
                  },
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 933,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 325,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.5.1',
                      'Content-Length': '82',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'taxes.free.beeceptor.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: [Circular *4],
                    pathname: '/log-tax',
                    _defaultAgent: [Circular *2],
                    host: 'taxes.free.beeceptor.com',
                    noDelay: true,
                    servername: 'taxes.free.beeceptor.com',
                    _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/log-tax'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 82,
    _requestBodyBuffers: [
      {
        data: <Buffer 7b 22 6f 72 64 65 72 5f 69 64 22 3a 22 36 35 31 36 33 34 63 61 31 36 61 34 38 31 37 66 64 64 34 65 35 37 66 30 22 2c 22 70 6c 61 74 66 6f 72 6d 5f 63 ... 32 more bytes>,
        encoding: undefined
      }
    ],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *5> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '82',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'taxes.free.beeceptor.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          drain: [Function: ondrain]
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'taxes.free.beeceptor.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: true,
          emitClose: false,
          autoDestroy: true,
          destroyed: true,
          errored: Error: read ECONNRESET
              at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
            errno: -104,
            code: 'ECONNRESET',
            syscall: 'read'
          },
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: true,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: true,
          emitClose: false,
          autoDestroy: true,
          errored: Error: read ECONNRESET
              at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
            errno: -104,
            code: 'ECONNRESET',
            syscall: 'read'
          },
          closed: true,
          closeEmitted: true,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *5],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1],
            [Symbol(handle_onclose)]: [Function: done]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 933,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 325,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.5.1',
            'Content-Length': '82',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'taxes.free.beeceptor.com',
          port: 443,
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/log-tax',
          _defaultAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'taxes.free.beeceptor.com',
          noDelay: true,
          servername: 'taxes.free.beeceptor.com',
          _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /log-tax HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.5.1\r\n' +
        'Content-Length: 82\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: taxes.free.beeceptor.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'taxes.free.beeceptor.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                drain: [Function: ondrain]
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'taxes.free.beeceptor.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: true,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: Error: read ECONNRESET
                    at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                  errno: -104,
                  code: 'ECONNRESET',
                  syscall: 'read'
                },
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: false,
                errorEmitted: true,
                emitClose: false,
                autoDestroy: true,
                errored: Error: read ECONNRESET
                    at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                  errno: -104,
                  code: 'ECONNRESET',
                  syscall: 'read'
                },
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *5],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 933,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 325,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.5.1',
                  'Content-Length': '82',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'taxes.free.beeceptor.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *2],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/log-tax',
                _defaultAgent: [Circular *2],
                host: 'taxes.free.beeceptor.com',
                noDelay: true,
                servername: 'taxes.free.beeceptor.com',
                _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
          },
          list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/log-tax',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'taxes.free.beeceptor.com',
      protocol: 'https:',
      _redirectable: [Circular *3],
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
        'content-length': [ 'Content-Length', '82' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'taxes.free.beeceptor.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'https://taxes.free.beeceptor.com/log-tax',
    [Symbol(kCapture)]: false
  },
  cause: Error: read ECONNRESET
      at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
    errno: -104,
    code: 'ECONNRESET',
    syscall: 'read'
  },
  stack: 'Error: read ECONNRESET\n' +
    '    at AxiosError.from (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:837:14)\n' +
    '    at RedirectableRequest.handleRequestError (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:3016:25)\n' +
    '    at RedirectableRequest.emit (node:events:514:28)\n' +
    '    at eventHandlers.<computed> (/home/musediq/Documents/duplo-backend/node_modules/follow-redirects/index.js:14:24)\n' +
    '    at ClientRequest.emit (node:events:514:28)\n' +
    '    at TLSSocket.socketErrorListener (node:_http_client:501:9)\n' +
    '    at TLSSocket.emit (node:events:514:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:151:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    AxiosError: read ECONNRESET
        at AxiosError.from (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:837:14)
        at RedirectableRequest.handleRequestError (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:3016:25)
        at RedirectableRequest.emit (node:events:514:28)
        at eventHandlers.<computed> (/home/musediq/Documents/duplo-backend/node_modules/follow-redirects/index.js:14:24)
        at ClientRequest.emit (node:events:514:28)
        at TLSSocket.socketErrorListener (node:_http_client:501:9)
        at TLSSocket.emit (node:events:514:28)
        at emitErrorNT (node:internal/streams/destroy:151:8)
        at emitErrorCloseNT (node:internal/streams/destroy:116:3)
        at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
      syscall: 'read',
      code: 'ECONNRESET',
      errno: -104,
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.5.1',
          'Content-Length': '82',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://taxes.free.beeceptor.com/log-tax',
        data: '{"order_id":"651634ca16a4817fdd4e57f0","platform_code":"022","order_amount":30000}'
      },
      request: <ref *3> Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/log-tax',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.5.1',
            'Content-Length': '82',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'taxes.free.beeceptor.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'taxes.free.beeceptor.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        drain: [Function: ondrain]
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: true,
                      _parent: null,
                      _host: 'taxes.free.beeceptor.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: true,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: true,
                        errored: Error: read ECONNRESET
                            at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                          errno: -104,
                          code: 'ECONNRESET',
                          syscall: 'read'
                        },
                        closed: true,
                        closeEmitted: true,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: false,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: true,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: true,
                        emitClose: false,
                        autoDestroy: true,
                        errored: Error: read ECONNRESET
                            at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                          errno: -104,
                          code: 'ECONNRESET',
                          syscall: 'read'
                        },
                        closed: true,
                        closeEmitted: true,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: null,
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: <ref *5> ClientRequest {
                        _events: [Object: null prototype] {
                          response: [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          abort: [Function (anonymous)],
                          aborted: [Function (anonymous)],
                          connect: [Function (anonymous)],
                          error: [Function (anonymous)],
                          socket: [Function (anonymous)],
                          timeout: [Function (anonymous)]
                        },
                        _eventsCount: 7,
                        _maxListeners: undefined,
                        outputData: [],
                        outputSize: 0,
                        writable: true,
                        destroyed: false,
                        _last: true,
                        chunkedEncoding: false,
                        shouldKeepAlive: false,
                        maxRequestsOnConnectionReached: false,
                        _defaultKeepAlive: true,
                        useChunkedEncodingByDefault: true,
                        sendDate: false,
                        _removedConnection: false,
                        _removedContLen: false,
                        _removedTE: false,
                        strictContentLength: false,
                        _contentLength: '82',
                        _hasBody: true,
                        _trailer: '',
                        finished: true,
                        _headerSent: true,
                        _closed: false,
                        socket: [Circular *1],
                        _header: 'POST /log-tax HTTP/1.1\r\n' +
                          'Accept: application/json, text/plain, */*\r\n' +
                          'Content-Type: application/json\r\n' +
                          'User-Agent: axios/1.5.1\r\n' +
                          'Content-Length: 82\r\n' +
                          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                          'Host: taxes.free.beeceptor.com\r\n' +
                          'Connection: close\r\n' +
                          '\r\n',
                        _keepAliveTimeout: 0,
                        _onPendingData: [Function: nop],
                        agent: [Circular *2],
                        socketPath: undefined,
                        method: 'POST',
                        maxHeaderSize: undefined,
                        insecureHTTPParser: undefined,
                        joinDuplicateHeaders: undefined,
                        path: '/log-tax',
                        _ended: false,
                        res: null,
                        aborted: false,
                        timeoutCb: null,
                        upgradeOrConnect: false,
                        parser: null,
                        maxHeadersCount: null,
                        reusedSocket: false,
                        host: 'taxes.free.beeceptor.com',
                        protocol: 'https:',
                        _redirectable: [Circular *3],
                        [Symbol(kCapture)]: false,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(kNeedDrain)]: false,
                        [Symbol(corked)]: 0,
                        [Symbol(kOutHeaders)]: [Object: null prototype] {
                          accept: [
                            'Accept',
                            'application/json, text/plain, */*'
                          ],
                          'content-type': [ 'Content-Type', 'application/json' ],
                          'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
                          'content-length': [ 'Content-Length', '82' ],
                          'accept-encoding': [
                            'Accept-Encoding',
                            'gzip, compress, deflate, br'
                          ],
                          host: [ 'Host', 'taxes.free.beeceptor.com' ]
                        },
                        [Symbol(errored)]: null,
                        [Symbol(kHighWaterMark)]: 16384,
                        [Symbol(kRejectNonStandardBodyWrites)]: false,
                        [Symbol(kUniqueHeaders)]: null
                      },
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1],
                          [Symbol(handle_onclose)]: [Function: done]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 933,
                      [Symbol(kHandle)]: null,
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 325,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.5.1',
                          'Content-Length': '82',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'taxes.free.beeceptor.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/log-tax',
                        _defaultAgent: [Circular *2],
                        host: 'taxes.free.beeceptor.com',
                        noDelay: true,
                        servername: 'taxes.free.beeceptor.com',
                        _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/log-tax'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 82,
        _requestBodyBuffers: [
          {
            data: <Buffer 7b 22 6f 72 64 65 72 5f 69 64 22 3a 22 36 35 31 36 33 34 63 61 31 36 61 34 38 31 37 66 64 64 34 65 35 37 66 30 22 2c 22 70 6c 61 74 66 6f 72 6d 5f 63 ... 32 more bytes>,
            encoding: undefined
          }
        ],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: <ref *5> ClientRequest {
          _events: [Object: null prototype] {
            response: [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: '82',
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: false,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'taxes.free.beeceptor.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              drain: [Function: ondrain]
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: true,
            _parent: null,
            _host: 'taxes.free.beeceptor.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: true,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: Error: read ECONNRESET
                  at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                errno: -104,
                code: 'ECONNRESET',
                syscall: 'read'
              },
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: true,
              emitClose: false,
              autoDestroy: true,
              errored: Error: read ECONNRESET
                  at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                errno: -104,
                code: 'ECONNRESET',
                syscall: 'read'
              },
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *5],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 933,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 325,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.5.1',
                'Content-Length': '82',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'taxes.free.beeceptor.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *2> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                      },
                      list: [
                        'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/log-tax',
              _defaultAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'taxes.free.beeceptor.com',
              noDelay: true,
              servername: 'taxes.free.beeceptor.com',
              _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _header: 'POST /log-tax HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'Content-Type: application/json\r\n' +
            'User-Agent: axios/1.5.1\r\n' +
            'Content-Length: 82\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: taxes.free.beeceptor.com\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'taxes.free.beeceptor.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    drain: [Function: ondrain]
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: true,
                  _parent: null,
                  _host: 'taxes.free.beeceptor.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: false,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: [Circular *5],
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 933,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 325,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.5.1',
                      'Content-Length': '82',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'taxes.free.beeceptor.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *2],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/log-tax',
                    _defaultAgent: [Circular *2],
                    host: 'taxes.free.beeceptor.com',
                    noDelay: true,
                    servername: 'taxes.free.beeceptor.com',
                    _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'POST',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/log-tax',
          _ended: false,
          res: null,
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'taxes.free.beeceptor.com',
          protocol: 'https:',
          _redirectable: [Circular *3],
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'content-type': [ 'Content-Type', 'application/json' ],
            'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
            'content-length': [ 'Content-Length', '82' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'taxes.free.beeceptor.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kHighWaterMark)]: 16384,
          [Symbol(kRejectNonStandardBodyWrites)]: false,
          [Symbol(kUniqueHeaders)]: null
        },
        _currentUrl: 'https://taxes.free.beeceptor.com/log-tax',
        [Symbol(kCapture)]: false
      },
      cause: Error: read ECONNRESET
          at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
        errno: -104,
        code: 'ECONNRESET',
        syscall: 'read'
      }
    }
  ],
  [Symbol(message)]: '{"cause":{"code":"ECONNRESET","errno":-104,"syscall":"read"},"code":"ECONNRESET","config":{"adapter":["xhr","http"],"data":"{\\"order_id\\":\\"651634ca16a4817fdd4e57f0\\",\\"platform_code\\":\\"022\\",\\"order_amount\\":30000}","env":{},"headers":{"Accept":"application/json, text/plain, */*","Accept-Encoding":"gzip, compress, deflate, br","Content-Length":"82","Content-Type":"application/json","User-Agent":"axios/1.5.1"},"maxBodyLength":-1,"maxContentLength":-1,"method":"post","timeout":0,"transformRequest":[null],"transformResponse":[null],"transitional":{"clarifyTimeoutError":false,"forcedJSONParsing":true,"silentJSONParsing":true},"url":"https://taxes.free.beeceptor.com/log-tax","xsrfCookieName":"XSRF-TOKEN","xsrfHeaderName":"X-XSRF-TOKEN"},"errno":-104,"level":"error","message":"read ECONNRESET","name":"Error","request":{"_currentRequest":{"_closed":false,"_contentLength":"82","_defaultKeepAlive":true,"_ended":false,"_events":{},"_eventsCount":7,"_hasBody":true,"_header":"POST /log-tax HTTP/1.1\\r\\nAccept: application/json, text/plain, */*\\r\\nContent-Type: application/json\\r\\nUser-Agent: axios/1.5.1\\r\\nContent-Length: 82\\r\\nAccept-Encoding: gzip, compress, deflate, br\\r\\nHost: taxes.free.beeceptor.com\\r\\nConnection: close\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":0,"_last":true,"_redirectable":"[Circular]","_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_trailer":"","aborted":false,"agent":{"_events":{},"_eventsCount":2,"_sessionCache":{"list":["taxes.free.beeceptor.com:443:::::::::::::::::::::"],"map":{"taxes.free.beeceptor.com:443:::::::::::::::::::::":{"data":[48,130,5,30,2,1,1,2,2,3,4,4,2,19,1,4,32,215,95,139,82,114,19,5,67,111,230,144,55,152,102,27,9,232,212,166,2,242,181,119,47,122,139,51,177,75,27,197,219,4,32,92,207,90,125,217,14,136,214,26,42,196,16,76,201,132,193,238,13,236,156,28,63,177,156,39,148,31,159,112,108,79,233,161,6,2,4,101,22,52,203,162,4,2,2,28,32,163,130,4,47,48,130,4,43,48,130,3,19,160,3,2,1,2,2,18,4,156,244,113,45,112,22,209,0,156,39,116,177,15,145,51,143,32,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,48,50,49,11,48,9,6,3,85,4,6,19,2,85,83,49,22,48,20,6,3,85,4,10,19,13,76,101,116,39,115,32,69,110,99,114,121,112,116,49,11,48,9,6,3,85,4,3,19,2,82,51,48,30,23,13,50,51,48,56,50,51,48,50,51,49,50,51,90,23,13,50,51,49,49,50,49,48,50,51,49,50,50,90,48,31,49,29,48,27,6,3,85,4,3,12,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,89,48,19,6,7,42,134,72,206,61,2,1,6,8,42,134,72,206,61,3,1,7,3,66,0,4,60,250,210,25,138,101,106,214,236,195,196,6,221,133,229,21,95,172,29,132,69,213,36,173,135,174,153,252,213,128,152,109,152,252,17,139,250,94,190,149,211,230,48,79,106,223,104,83,104,20,220,101,197,177,135,114,94,230,155,228,21,243,85,5,163,130,2,23,48,130,2,19,48,14,6,3,85,29,15,1,1,255,4,4,3,2,7,128,48,29,6,3,85,29,37,4,22,48,20,6,8,43,6,1,5,5,7,3,1,6,8,43,6,1,5,5,7,3,2,48,12,6,3,85,29,19,1,1,255,4,2,48,0,48,29,6,3,85,29,14,4,22,4,20,111,42,75,233,62,133,38,73,190,22,181,53,118,252,56,10,18,192,147,164,48,31,6,3,85,29,35,4,24,48,22,128,20,20,46,179,23,183,88,86,203,174,80,9,64,230,31,175,157,139,20,194,198,48,85,6,8,43,6,1,5,5,7,1,1,4,73,48,71,48,33,6,8,43,6,1,5,5,7,48,1,134,21,104,116,116,112,58,47,47,114,51,46,111,46,108,101,110,99,114,46,111,114,103,48,34,6,8,43,6,1,5,5,7,48,2,134,22,104,116,116,112,58,47,47,114,51,46,105,46,108,101,110,99,114,46,111,114,103,47,48,31,6,3,85,29,17,4,24,48,22,130,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,19,6,3,85,29,32,4,12,48,10,48,8,6,6,103,129,12,1,2,1,48,130,1,5,6,10,43,6,1,4,1,214,121,2,4,2,4,129,246,4,129,243,0,241,0,118,0,183,62,251,36,223,156,77,186,117,242,57,197,186,88,244,108,93,252,66,207,122,159,53,196,158,29,9,129,37,237,180,153,0,0,1,138,32,114,107,85,0,0,4,3,0,71,48,69,2,32,119,232,84,222,53,144,92,227,2,245,16,108,137,212,141,78,67,64,152,104,130,196,44,227,225,101,2,84,247,74,57,206,2,33,0,201,249,59,88,108,225,244,177,243,78,16,97,102,20,117,57,210,52,198,152,11,250,133,48,253,49,75,185,99,206,172,234,0,119,0,232,62,208,218,62,245,6,53,50,231,87,40,188,137,107,201,3,211,203,209,17,107,236,235,105,225,119,125,109,6,189,110,0,0,1,138,32,114,107,93,0,0,4,3,0,72,48,70,2,33,0,198,110,150,186,38,132,153,49,178,64,115,210,22,170,230,166,66,101,129,63,186,44,99,4,117,241,57,13,244,245,19,246,2,33,0,151,177,220,79,34,124,236,6,226,139,179,48,194,160,36,20,198,230,15,235,93,250,37,126,241,216,25,93,155,23,188,200,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,3,130,1,1,0,162,129,174,35,151,50,62,104,88,87,210,124,171,23,245,26,241,78,55,107,120,143,8,191,22,37,112,118,205,147,99,121,150,254,100,76,32,196,78,16,44,107,5,168,117,72,137,157,254,124,17,64,7,93,74,183,15,162,162,252,240,167,34,41,60,50,102,228,221,230,111,23,134,51,139,127,87,227,136,226,72,246,105,79,150,119,96,188,36,64,193,146,252,179,97,238,234,70,81,134,119,181,118,191,146,88,139,212,106,84,37,210,231,201,11,218,77,90,110,211,58,246,199,208,11,62,144,203,246,79,165,210,221,214,117,215,112,45,149,141,117,221,21,251,101,78,62,42,68,96,113,208,55,10,206,238,171,186,123,121,165,100,188,42,20,136,165,31,75,10,183,176,68,194,205,231,106,47,73,190,230,88,193,28,10,230,184,140,63,229,172,140,24,155,184,206,167,165,32,112,27,99,253,245,233,41,133,146,205,120,210,25,193,99,139,221,101,173,58,121,222,110,124,159,183,176,226,172,168,156,231,217,197,78,24,198,10,40,217,182,80,91,12,7,161,96,72,195,135,231,199,13,243,171,118,171,164,2,4,0,169,5,2,3,9,58,128,170,115,4,113,251,212,143,98,68,233,118,146,216,120,36,170,87,114,15,61,251,17,63,53,211,152,101,20,14,211,72,36,191,44,142,192,137,43,71,185,26,217,184,64,147,224,21,138,69,148,11,123,194,192,240,150,31,13,16,28,29,12,37,171,111,230,235,80,169,47,129,2,147,0,194,250,183,126,188,214,116,59,3,195,157,100,55,108,193,181,231,200,36,26,117,37,174,101,14,218,51,95,160,13,94,166,193,138,65,7,172,228,9,239,240,47,46,174,7,2,5,0,200,29,233,253,179,3,2,1,29],"type":"Buffer"}}},"defaultPort":443,"freeSockets":{},"keepAlive":false,"keepAliveMsecs":1000,"maxCachedSessions":100,"maxFreeSockets":256,"maxSockets":null,"maxTotalSockets":null,"options":{"noDelay":true,"path":null},"protocol":"https:","requests":{},"scheduling":"lifo","sockets":{"taxes.free.beeceptor.com:443:::::::::::::::::::::":[{"_SNICallback":null,"_closeAfterHandlingError":false,"_controlReleased":true,"_events":{"close":[null,null,null,null]},"_eventsCount":10,"_hadError":true,"_host":"taxes.free.beeceptor.com","_httpMessage":"[Circular]","_newSessionPending":false,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":true,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":true,"closed":true,"constructed":true,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":true,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":true,"errored":{"code":"ECONNRESET","errno":-104,"syscall":"read"},"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_rejectUnauthorized":true,"_requestCert":true,"_secureEstablished":true,"_securePending":false,"_server":null,"_sockname":null,"_tlsOptions":{"isServer":false,"pipe":false,"rejectUnauthorized":true,"requestCert":true,"secureContext":{"context":{}},"session":{"data":[48,130,5,29,2,1,1,2,2,3,4,4,2,19,1,4,32,183,192,100,128,9,49,148,11,69,118,158,126,84,140,42,191,61,67,93,29,106,80,52,229,231,235,134,110,71,180,14,26,4,32,124,174,151,4,211,222,122,202,199,162,195,38,53,184,133,9,156,215,249,106,178,225,191,181,195,230,102,215,209,227,170,237,161,6,2,4,101,22,52,160,162,4,2,2,28,32,163,130,4,47,48,130,4,43,48,130,3,19,160,3,2,1,2,2,18,4,156,244,113,45,112,22,209,0,156,39,116,177,15,145,51,143,32,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,48,50,49,11,48,9,6,3,85,4,6,19,2,85,83,49,22,48,20,6,3,85,4,10,19,13,76,101,116,39,115,32,69,110,99,114,121,112,116,49,11,48,9,6,3,85,4,3,19,2,82,51,48,30,23,13,50,51,48,56,50,51,48,50,51,49,50,51,90,23,13,50,51,49,49,50,49,48,50,51,49,50,50,90,48,31,49,29,48,27,6,3,85,4,3,12,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,89,48,19,6,7,42,134,72,206,61,2,1,6,8,42,134,72,206,61,3,1,7,3,66,0,4,60,250,210,25,138,101,106,214,236,195,196,6,221,133,229,21,95,172,29,132,69,213,36,173,135,174,153,252,213,128,152,109,152,252,17,139,250,94,190,149,211,230,48,79,106,223,104,83,104,20,220,101,197,177,135,114,94,230,155,228,21,243,85,5,163,130,2,23,48,130,2,19,48,14,6,3,85,29,15,1,1,255,4,4,3,2,7,128,48,29,6,3,85,29,37,4,22,48,20,6,8,43,6,1,5,5,7,3,1,6,8,43,6,1,5,5,7,3,2,48,12,6,3,85,29,19,1,1,255,4,2,48,0,48,29,6,3,85,29,14,4,22,4,20,111,42,75,233,62,133,38,73,190,22,181,53,118,252,56,10,18,192,147,164,48,31,6,3,85,29,35,4,24,48,22,128,20,20,46,179,23,183,88,86,203,174,80,9,64,230,31,175,157,139,20,194,198,48,85,6,8,43,6,1,5,5,7,1,1,4,73,48,71,48,33,6,8,43,6,1,5,5,7,48,1,134,21,104,116,116,112,58,47,47,114,51,46,111,46,108,101,110,99,114,46,111,114,103,48,34,6,8,43,6,1,5,5,7,48,2,134,22,104,116,116,112,58,47,47,114,51,46,105,46,108,101,110,99,114,46,111,114,103,47,48,31,6,3,85,29,17,4,24,48,22,130,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,19,6,3,85,29,32,4,12,48,10,48,8,6,6,103,129,12,1,2,1,48,130,1,5,6,10,43,6,1,4,1,214,121,2,4,2,4,129,246,4,129,243,0,241,0,118,0,183,62,251,36,223,156,77,186,117,242,57,197,186,88,244,108,93,252,66,207,122,159,53,196,158,29,9,129,37,237,180,153,0,0,1,138,32,114,107,85,0,0,4,3,0,71,48,69,2,32,119,232,84,222,53,144,92,227,2,245,16,108,137,212,141,78,67,64,152,104,130,196,44,227,225,101,2,84,247,74,57,206,2,33,0,201,249,59,88,108,225,244,177,243,78,16,97,102,20,117,57,210,52,198,152,11,250,133,48,253,49,75,185,99,206,172,234,0,119,0,232,62,208,218,62,245,6,53,50,231,87,40,188,137,107,201,3,211,203,209,17,107,236,235,105,225,119,125,109,6,189,110,0,0,1,138,32,11'... 26250 more characters
}
2023-09-29 03:23:04 error: read ECONNRESET {
  service: 'controller',
  syscall: 'read',
  code: 'ECONNRESET',
  errno: -104,
  name: 'Error',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.5.1',
      'Content-Length': '82',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'post',
    url: 'https://taxes.free.beeceptor.com/log-tax',
    data: '{"order_id":"651634ca16a4817fdd4e57f0","platform_code":"022","order_amount":30000}'
  },
  request: <ref *3> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [Function: handleRequestSocket]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'https:',
      path: '/log-tax',
      method: 'POST',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.5.1',
        'Content-Length': '82',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'taxes.free.beeceptor.com',
      port: '',
      agent: undefined,
      nativeProtocols: <ref *4> {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',         'BIND',       'CHECKOUT',
            'CONNECT',     'COPY',       'DELETE',
            'GET',         'HEAD',       'LINK',
            'LOCK',        'M-SEARCH',   'MERGE',
            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
            'MOVE',        'NOTIFY',     'OPTIONS',
            'PATCH',       'POST',       'PROPFIND',
            'PROPPATCH',   'PURGE',      'PUT',
            'REBIND',      'REPORT',     'SEARCH',
            'SOURCE',      'SUBSCRIBE',  'TRACE',
            'UNBIND',      'UNLINK',     'UNLOCK',
            'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: __node_internal_],
          validateHeaderValue: [Function: __node_internal_],
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'taxes.free.beeceptor.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    drain: [Function: ondrain]
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: true,
                  _parent: null,
                  _host: 'taxes.free.beeceptor.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: false,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '82',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *1],
                    _header: 'POST /log-tax HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.5.1\r\n' +
                      'Content-Length: 82\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: taxes.free.beeceptor.com\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *2],
                    socketPath: undefined,
                    method: 'POST',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    joinDuplicateHeaders: undefined,
                    path: '/log-tax',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: null,
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'taxes.free.beeceptor.com',
                    protocol: 'https:',
                    _redirectable: [Circular *3],
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
                      'content-length': [ 'Content-Length', '82' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'taxes.free.beeceptor.com' ]
                    },
                    [Symbol(errored)]: null,
                    [Symbol(kHighWaterMark)]: 16384,
                    [Symbol(kRejectNonStandardBodyWrites)]: false,
                    [Symbol(kUniqueHeaders)]: null
                  },
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 933,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 325,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.5.1',
                      'Content-Length': '82',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'taxes.free.beeceptor.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: [Circular *4],
                    pathname: '/log-tax',
                    _defaultAgent: [Circular *2],
                    host: 'taxes.free.beeceptor.com',
                    noDelay: true,
                    servername: 'taxes.free.beeceptor.com',
                    _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/log-tax'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 82,
    _requestBodyBuffers: [
      {
        data: <Buffer 7b 22 6f 72 64 65 72 5f 69 64 22 3a 22 36 35 31 36 33 34 63 61 31 36 61 34 38 31 37 66 64 64 34 65 35 37 66 30 22 2c 22 70 6c 61 74 66 6f 72 6d 5f 63 ... 32 more bytes>,
        encoding: undefined
      }
    ],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *5> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '82',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'taxes.free.beeceptor.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          drain: [Function: ondrain]
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'taxes.free.beeceptor.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: true,
          emitClose: false,
          autoDestroy: true,
          destroyed: true,
          errored: Error: read ECONNRESET
              at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
            errno: -104,
            code: 'ECONNRESET',
            syscall: 'read'
          },
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: true,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: true,
          emitClose: false,
          autoDestroy: true,
          errored: Error: read ECONNRESET
              at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
            errno: -104,
            code: 'ECONNRESET',
            syscall: 'read'
          },
          closed: true,
          closeEmitted: true,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *5],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1],
            [Symbol(handle_onclose)]: [Function: done]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 933,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 325,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.5.1',
            'Content-Length': '82',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'taxes.free.beeceptor.com',
          port: 443,
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/log-tax',
          _defaultAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'taxes.free.beeceptor.com',
          noDelay: true,
          servername: 'taxes.free.beeceptor.com',
          _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /log-tax HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.5.1\r\n' +
        'Content-Length: 82\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: taxes.free.beeceptor.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'taxes.free.beeceptor.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                drain: [Function: ondrain]
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'taxes.free.beeceptor.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: true,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: Error: read ECONNRESET
                    at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                  errno: -104,
                  code: 'ECONNRESET',
                  syscall: 'read'
                },
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: false,
                errorEmitted: true,
                emitClose: false,
                autoDestroy: true,
                errored: Error: read ECONNRESET
                    at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                  errno: -104,
                  code: 'ECONNRESET',
                  syscall: 'read'
                },
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *5],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 933,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 325,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.5.1',
                  'Content-Length': '82',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'taxes.free.beeceptor.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *2],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/log-tax',
                _defaultAgent: [Circular *2],
                host: 'taxes.free.beeceptor.com',
                noDelay: true,
                servername: 'taxes.free.beeceptor.com',
                _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
          },
          list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/log-tax',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'taxes.free.beeceptor.com',
      protocol: 'https:',
      _redirectable: [Circular *3],
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
        'content-length': [ 'Content-Length', '82' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'taxes.free.beeceptor.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'https://taxes.free.beeceptor.com/log-tax',
    [Symbol(kCapture)]: false
  },
  cause: Error: read ECONNRESET
      at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
    errno: -104,
    code: 'ECONNRESET',
    syscall: 'read'
  },
  stack: 'Error: read ECONNRESET\n' +
    '    at AxiosError.from (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:837:14)\n' +
    '    at RedirectableRequest.handleRequestError (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:3016:25)\n' +
    '    at RedirectableRequest.emit (node:events:514:28)\n' +
    '    at eventHandlers.<computed> (/home/musediq/Documents/duplo-backend/node_modules/follow-redirects/index.js:14:24)\n' +
    '    at ClientRequest.emit (node:events:514:28)\n' +
    '    at TLSSocket.socketErrorListener (node:_http_client:501:9)\n' +
    '    at TLSSocket.emit (node:events:514:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:151:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    AxiosError: read ECONNRESET
        at AxiosError.from (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:837:14)
        at RedirectableRequest.handleRequestError (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:3016:25)
        at RedirectableRequest.emit (node:events:514:28)
        at eventHandlers.<computed> (/home/musediq/Documents/duplo-backend/node_modules/follow-redirects/index.js:14:24)
        at ClientRequest.emit (node:events:514:28)
        at TLSSocket.socketErrorListener (node:_http_client:501:9)
        at TLSSocket.emit (node:events:514:28)
        at emitErrorNT (node:internal/streams/destroy:151:8)
        at emitErrorCloseNT (node:internal/streams/destroy:116:3)
        at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
      syscall: 'read',
      code: 'ECONNRESET',
      errno: -104,
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.5.1',
          'Content-Length': '82',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://taxes.free.beeceptor.com/log-tax',
        data: '{"order_id":"651634ca16a4817fdd4e57f0","platform_code":"022","order_amount":30000}'
      },
      request: <ref *3> Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/log-tax',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.5.1',
            'Content-Length': '82',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'taxes.free.beeceptor.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'taxes.free.beeceptor.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        drain: [Function: ondrain]
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: true,
                      _parent: null,
                      _host: 'taxes.free.beeceptor.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: true,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: true,
                        errored: Error: read ECONNRESET
                            at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                          errno: -104,
                          code: 'ECONNRESET',
                          syscall: 'read'
                        },
                        closed: true,
                        closeEmitted: true,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: false,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: true,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: true,
                        emitClose: false,
                        autoDestroy: true,
                        errored: Error: read ECONNRESET
                            at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                          errno: -104,
                          code: 'ECONNRESET',
                          syscall: 'read'
                        },
                        closed: true,
                        closeEmitted: true,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: null,
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: <ref *5> ClientRequest {
                        _events: [Object: null prototype] {
                          response: [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          abort: [Function (anonymous)],
                          aborted: [Function (anonymous)],
                          connect: [Function (anonymous)],
                          error: [Function (anonymous)],
                          socket: [Function (anonymous)],
                          timeout: [Function (anonymous)]
                        },
                        _eventsCount: 7,
                        _maxListeners: undefined,
                        outputData: [],
                        outputSize: 0,
                        writable: true,
                        destroyed: false,
                        _last: true,
                        chunkedEncoding: false,
                        shouldKeepAlive: false,
                        maxRequestsOnConnectionReached: false,
                        _defaultKeepAlive: true,
                        useChunkedEncodingByDefault: true,
                        sendDate: false,
                        _removedConnection: false,
                        _removedContLen: false,
                        _removedTE: false,
                        strictContentLength: false,
                        _contentLength: '82',
                        _hasBody: true,
                        _trailer: '',
                        finished: true,
                        _headerSent: true,
                        _closed: false,
                        socket: [Circular *1],
                        _header: 'POST /log-tax HTTP/1.1\r\n' +
                          'Accept: application/json, text/plain, */*\r\n' +
                          'Content-Type: application/json\r\n' +
                          'User-Agent: axios/1.5.1\r\n' +
                          'Content-Length: 82\r\n' +
                          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                          'Host: taxes.free.beeceptor.com\r\n' +
                          'Connection: close\r\n' +
                          '\r\n',
                        _keepAliveTimeout: 0,
                        _onPendingData: [Function: nop],
                        agent: [Circular *2],
                        socketPath: undefined,
                        method: 'POST',
                        maxHeaderSize: undefined,
                        insecureHTTPParser: undefined,
                        joinDuplicateHeaders: undefined,
                        path: '/log-tax',
                        _ended: false,
                        res: null,
                        aborted: false,
                        timeoutCb: null,
                        upgradeOrConnect: false,
                        parser: null,
                        maxHeadersCount: null,
                        reusedSocket: false,
                        host: 'taxes.free.beeceptor.com',
                        protocol: 'https:',
                        _redirectable: [Circular *3],
                        [Symbol(kCapture)]: false,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(kNeedDrain)]: false,
                        [Symbol(corked)]: 0,
                        [Symbol(kOutHeaders)]: [Object: null prototype] {
                          accept: [
                            'Accept',
                            'application/json, text/plain, */*'
                          ],
                          'content-type': [ 'Content-Type', 'application/json' ],
                          'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
                          'content-length': [ 'Content-Length', '82' ],
                          'accept-encoding': [
                            'Accept-Encoding',
                            'gzip, compress, deflate, br'
                          ],
                          host: [ 'Host', 'taxes.free.beeceptor.com' ]
                        },
                        [Symbol(errored)]: null,
                        [Symbol(kHighWaterMark)]: 16384,
                        [Symbol(kRejectNonStandardBodyWrites)]: false,
                        [Symbol(kUniqueHeaders)]: null
                      },
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1],
                          [Symbol(handle_onclose)]: [Function: done]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 933,
                      [Symbol(kHandle)]: null,
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 325,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.5.1',
                          'Content-Length': '82',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'taxes.free.beeceptor.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/log-tax',
                        _defaultAgent: [Circular *2],
                        host: 'taxes.free.beeceptor.com',
                        noDelay: true,
                        servername: 'taxes.free.beeceptor.com',
                        _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/log-tax'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 82,
        _requestBodyBuffers: [
          {
            data: <Buffer 7b 22 6f 72 64 65 72 5f 69 64 22 3a 22 36 35 31 36 33 34 63 61 31 36 61 34 38 31 37 66 64 64 34 65 35 37 66 30 22 2c 22 70 6c 61 74 66 6f 72 6d 5f 63 ... 32 more bytes>,
            encoding: undefined
          }
        ],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: <ref *5> ClientRequest {
          _events: [Object: null prototype] {
            response: [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: '82',
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: false,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'taxes.free.beeceptor.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              drain: [Function: ondrain]
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: true,
            _parent: null,
            _host: 'taxes.free.beeceptor.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: true,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: Error: read ECONNRESET
                  at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                errno: -104,
                code: 'ECONNRESET',
                syscall: 'read'
              },
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: true,
              emitClose: false,
              autoDestroy: true,
              errored: Error: read ECONNRESET
                  at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                errno: -104,
                code: 'ECONNRESET',
                syscall: 'read'
              },
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *5],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 933,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 325,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.5.1',
                'Content-Length': '82',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'taxes.free.beeceptor.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *2> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                      },
                      list: [
                        'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/log-tax',
              _defaultAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'taxes.free.beeceptor.com',
              noDelay: true,
              servername: 'taxes.free.beeceptor.com',
              _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _header: 'POST /log-tax HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'Content-Type: application/json\r\n' +
            'User-Agent: axios/1.5.1\r\n' +
            'Content-Length: 82\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: taxes.free.beeceptor.com\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'taxes.free.beeceptor.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    drain: [Function: ondrain]
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: true,
                  _parent: null,
                  _host: 'taxes.free.beeceptor.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: false,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: [Circular *5],
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 933,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 325,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.5.1',
                      'Content-Length': '82',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'taxes.free.beeceptor.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *2],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/log-tax',
                    _defaultAgent: [Circular *2],
                    host: 'taxes.free.beeceptor.com',
                    noDelay: true,
                    servername: 'taxes.free.beeceptor.com',
                    _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'POST',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/log-tax',
          _ended: false,
          res: null,
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'taxes.free.beeceptor.com',
          protocol: 'https:',
          _redirectable: [Circular *3],
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'content-type': [ 'Content-Type', 'application/json' ],
            'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
            'content-length': [ 'Content-Length', '82' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'taxes.free.beeceptor.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kHighWaterMark)]: 16384,
          [Symbol(kRejectNonStandardBodyWrites)]: false,
          [Symbol(kUniqueHeaders)]: null
        },
        _currentUrl: 'https://taxes.free.beeceptor.com/log-tax',
        [Symbol(kCapture)]: false
      },
      cause: Error: read ECONNRESET
          at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
        errno: -104,
        code: 'ECONNRESET',
        syscall: 'read'
      }
    }
  ],
  [Symbol(message)]: '{"cause":{"code":"ECONNRESET","errno":-104,"syscall":"read"},"code":"ECONNRESET","config":{"adapter":["xhr","http"],"data":"{\\"order_id\\":\\"651634ca16a4817fdd4e57f0\\",\\"platform_code\\":\\"022\\",\\"order_amount\\":30000}","env":{},"headers":{"Accept":"application/json, text/plain, */*","Accept-Encoding":"gzip, compress, deflate, br","Content-Length":"82","Content-Type":"application/json","User-Agent":"axios/1.5.1"},"maxBodyLength":-1,"maxContentLength":-1,"method":"post","timeout":0,"transformRequest":[null],"transformResponse":[null],"transitional":{"clarifyTimeoutError":false,"forcedJSONParsing":true,"silentJSONParsing":true},"url":"https://taxes.free.beeceptor.com/log-tax","xsrfCookieName":"XSRF-TOKEN","xsrfHeaderName":"X-XSRF-TOKEN"},"errno":-104,"level":"error","message":"read ECONNRESET","name":"Error","request":{"_currentRequest":{"_closed":false,"_contentLength":"82","_defaultKeepAlive":true,"_ended":false,"_events":{},"_eventsCount":7,"_hasBody":true,"_header":"POST /log-tax HTTP/1.1\\r\\nAccept: application/json, text/plain, */*\\r\\nContent-Type: application/json\\r\\nUser-Agent: axios/1.5.1\\r\\nContent-Length: 82\\r\\nAccept-Encoding: gzip, compress, deflate, br\\r\\nHost: taxes.free.beeceptor.com\\r\\nConnection: close\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":0,"_last":true,"_redirectable":"[Circular]","_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_trailer":"","aborted":false,"agent":{"_events":{},"_eventsCount":2,"_sessionCache":{"list":["taxes.free.beeceptor.com:443:::::::::::::::::::::"],"map":{"taxes.free.beeceptor.com:443:::::::::::::::::::::":{"data":[48,130,5,30,2,1,1,2,2,3,4,4,2,19,1,4,32,215,95,139,82,114,19,5,67,111,230,144,55,152,102,27,9,232,212,166,2,242,181,119,47,122,139,51,177,75,27,197,219,4,32,92,207,90,125,217,14,136,214,26,42,196,16,76,201,132,193,238,13,236,156,28,63,177,156,39,148,31,159,112,108,79,233,161,6,2,4,101,22,52,203,162,4,2,2,28,32,163,130,4,47,48,130,4,43,48,130,3,19,160,3,2,1,2,2,18,4,156,244,113,45,112,22,209,0,156,39,116,177,15,145,51,143,32,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,48,50,49,11,48,9,6,3,85,4,6,19,2,85,83,49,22,48,20,6,3,85,4,10,19,13,76,101,116,39,115,32,69,110,99,114,121,112,116,49,11,48,9,6,3,85,4,3,19,2,82,51,48,30,23,13,50,51,48,56,50,51,48,50,51,49,50,51,90,23,13,50,51,49,49,50,49,48,50,51,49,50,50,90,48,31,49,29,48,27,6,3,85,4,3,12,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,89,48,19,6,7,42,134,72,206,61,2,1,6,8,42,134,72,206,61,3,1,7,3,66,0,4,60,250,210,25,138,101,106,214,236,195,196,6,221,133,229,21,95,172,29,132,69,213,36,173,135,174,153,252,213,128,152,109,152,252,17,139,250,94,190,149,211,230,48,79,106,223,104,83,104,20,220,101,197,177,135,114,94,230,155,228,21,243,85,5,163,130,2,23,48,130,2,19,48,14,6,3,85,29,15,1,1,255,4,4,3,2,7,128,48,29,6,3,85,29,37,4,22,48,20,6,8,43,6,1,5,5,7,3,1,6,8,43,6,1,5,5,7,3,2,48,12,6,3,85,29,19,1,1,255,4,2,48,0,48,29,6,3,85,29,14,4,22,4,20,111,42,75,233,62,133,38,73,190,22,181,53,118,252,56,10,18,192,147,164,48,31,6,3,85,29,35,4,24,48,22,128,20,20,46,179,23,183,88,86,203,174,80,9,64,230,31,175,157,139,20,194,198,48,85,6,8,43,6,1,5,5,7,1,1,4,73,48,71,48,33,6,8,43,6,1,5,5,7,48,1,134,21,104,116,116,112,58,47,47,114,51,46,111,46,108,101,110,99,114,46,111,114,103,48,34,6,8,43,6,1,5,5,7,48,2,134,22,104,116,116,112,58,47,47,114,51,46,105,46,108,101,110,99,114,46,111,114,103,47,48,31,6,3,85,29,17,4,24,48,22,130,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,19,6,3,85,29,32,4,12,48,10,48,8,6,6,103,129,12,1,2,1,48,130,1,5,6,10,43,6,1,4,1,214,121,2,4,2,4,129,246,4,129,243,0,241,0,118,0,183,62,251,36,223,156,77,186,117,242,57,197,186,88,244,108,93,252,66,207,122,159,53,196,158,29,9,129,37,237,180,153,0,0,1,138,32,114,107,85,0,0,4,3,0,71,48,69,2,32,119,232,84,222,53,144,92,227,2,245,16,108,137,212,141,78,67,64,152,104,130,196,44,227,225,101,2,84,247,74,57,206,2,33,0,201,249,59,88,108,225,244,177,243,78,16,97,102,20,117,57,210,52,198,152,11,250,133,48,253,49,75,185,99,206,172,234,0,119,0,232,62,208,218,62,245,6,53,50,231,87,40,188,137,107,201,3,211,203,209,17,107,236,235,105,225,119,125,109,6,189,110,0,0,1,138,32,114,107,93,0,0,4,3,0,72,48,70,2,33,0,198,110,150,186,38,132,153,49,178,64,115,210,22,170,230,166,66,101,129,63,186,44,99,4,117,241,57,13,244,245,19,246,2,33,0,151,177,220,79,34,124,236,6,226,139,179,48,194,160,36,20,198,230,15,235,93,250,37,126,241,216,25,93,155,23,188,200,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,3,130,1,1,0,162,129,174,35,151,50,62,104,88,87,210,124,171,23,245,26,241,78,55,107,120,143,8,191,22,37,112,118,205,147,99,121,150,254,100,76,32,196,78,16,44,107,5,168,117,72,137,157,254,124,17,64,7,93,74,183,15,162,162,252,240,167,34,41,60,50,102,228,221,230,111,23,134,51,139,127,87,227,136,226,72,246,105,79,150,119,96,188,36,64,193,146,252,179,97,238,234,70,81,134,119,181,118,191,146,88,139,212,106,84,37,210,231,201,11,218,77,90,110,211,58,246,199,208,11,62,144,203,246,79,165,210,221,214,117,215,112,45,149,141,117,221,21,251,101,78,62,42,68,96,113,208,55,10,206,238,171,186,123,121,165,100,188,42,20,136,165,31,75,10,183,176,68,194,205,231,106,47,73,190,230,88,193,28,10,230,184,140,63,229,172,140,24,155,184,206,167,165,32,112,27,99,253,245,233,41,133,146,205,120,210,25,193,99,139,221,101,173,58,121,222,110,124,159,183,176,226,172,168,156,231,217,197,78,24,198,10,40,217,182,80,91,12,7,161,96,72,195,135,231,199,13,243,171,118,171,164,2,4,0,169,5,2,3,9,58,128,170,115,4,113,251,212,143,98,68,233,118,146,216,120,36,170,87,114,15,61,251,17,63,53,211,152,101,20,14,211,72,36,191,44,142,192,137,43,71,185,26,217,184,64,147,224,21,138,69,148,11,123,194,192,240,150,31,13,16,28,29,12,37,171,111,230,235,80,169,47,129,2,147,0,194,250,183,126,188,214,116,59,3,195,157,100,55,108,193,181,231,200,36,26,117,37,174,101,14,218,51,95,160,13,94,166,193,138,65,7,172,228,9,239,240,47,46,174,7,2,5,0,200,29,233,253,179,3,2,1,29],"type":"Buffer"}}},"defaultPort":443,"freeSockets":{},"keepAlive":false,"keepAliveMsecs":1000,"maxCachedSessions":100,"maxFreeSockets":256,"maxSockets":null,"maxTotalSockets":null,"options":{"noDelay":true,"path":null},"protocol":"https:","requests":{},"scheduling":"lifo","sockets":{"taxes.free.beeceptor.com:443:::::::::::::::::::::":[{"_SNICallback":null,"_closeAfterHandlingError":false,"_controlReleased":true,"_events":{"close":[null,null,null,null]},"_eventsCount":10,"_hadError":true,"_host":"taxes.free.beeceptor.com","_httpMessage":"[Circular]","_newSessionPending":false,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":true,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":true,"closed":true,"constructed":true,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":true,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":true,"errored":{"code":"ECONNRESET","errno":-104,"syscall":"read"},"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_rejectUnauthorized":true,"_requestCert":true,"_secureEstablished":true,"_securePending":false,"_server":null,"_sockname":null,"_tlsOptions":{"isServer":false,"pipe":false,"rejectUnauthorized":true,"requestCert":true,"secureContext":{"context":{}},"session":{"data":[48,130,5,29,2,1,1,2,2,3,4,4,2,19,1,4,32,183,192,100,128,9,49,148,11,69,118,158,126,84,140,42,191,61,67,93,29,106,80,52,229,231,235,134,110,71,180,14,26,4,32,124,174,151,4,211,222,122,202,199,162,195,38,53,184,133,9,156,215,249,106,178,225,191,181,195,230,102,215,209,227,170,237,161,6,2,4,101,22,52,160,162,4,2,2,28,32,163,130,4,47,48,130,4,43,48,130,3,19,160,3,2,1,2,2,18,4,156,244,113,45,112,22,209,0,156,39,116,177,15,145,51,143,32,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,48,50,49,11,48,9,6,3,85,4,6,19,2,85,83,49,22,48,20,6,3,85,4,10,19,13,76,101,116,39,115,32,69,110,99,114,121,112,116,49,11,48,9,6,3,85,4,3,19,2,82,51,48,30,23,13,50,51,48,56,50,51,48,50,51,49,50,51,90,23,13,50,51,49,49,50,49,48,50,51,49,50,50,90,48,31,49,29,48,27,6,3,85,4,3,12,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,89,48,19,6,7,42,134,72,206,61,2,1,6,8,42,134,72,206,61,3,1,7,3,66,0,4,60,250,210,25,138,101,106,214,236,195,196,6,221,133,229,21,95,172,29,132,69,213,36,173,135,174,153,252,213,128,152,109,152,252,17,139,250,94,190,149,211,230,48,79,106,223,104,83,104,20,220,101,197,177,135,114,94,230,155,228,21,243,85,5,163,130,2,23,48,130,2,19,48,14,6,3,85,29,15,1,1,255,4,4,3,2,7,128,48,29,6,3,85,29,37,4,22,48,20,6,8,43,6,1,5,5,7,3,1,6,8,43,6,1,5,5,7,3,2,48,12,6,3,85,29,19,1,1,255,4,2,48,0,48,29,6,3,85,29,14,4,22,4,20,111,42,75,233,62,133,38,73,190,22,181,53,118,252,56,10,18,192,147,164,48,31,6,3,85,29,35,4,24,48,22,128,20,20,46,179,23,183,88,86,203,174,80,9,64,230,31,175,157,139,20,194,198,48,85,6,8,43,6,1,5,5,7,1,1,4,73,48,71,48,33,6,8,43,6,1,5,5,7,48,1,134,21,104,116,116,112,58,47,47,114,51,46,111,46,108,101,110,99,114,46,111,114,103,48,34,6,8,43,6,1,5,5,7,48,2,134,22,104,116,116,112,58,47,47,114,51,46,105,46,108,101,110,99,114,46,111,114,103,47,48,31,6,3,85,29,17,4,24,48,22,130,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,19,6,3,85,29,32,4,12,48,10,48,8,6,6,103,129,12,1,2,1,48,130,1,5,6,10,43,6,1,4,1,214,121,2,4,2,4,129,246,4,129,243,0,241,0,118,0,183,62,251,36,223,156,77,186,117,242,57,197,186,88,244,108,93,252,66,207,122,159,53,196,158,29,9,129,37,237,180,153,0,0,1,138,32,114,107,85,0,0,4,3,0,71,48,69,2,32,119,232,84,222,53,144,92,227,2,245,16,108,137,212,141,78,67,64,152,104,130,196,44,227,225,101,2,84,247,74,57,206,2,33,0,201,249,59,88,108,225,244,177,243,78,16,97,102,20,117,57,210,52,198,152,11,250,133,48,253,49,75,185,99,206,172,234,0,119,0,232,62,208,218,62,245,6,53,50,231,87,40,188,137,107,201,3,211,203,209,17,107,236,235,105,225,119,125,109,6,189,110,0,0,1,138,32,11'... 26250 more characters
}
2023-09-29 03:23:04 error: read ECONNRESET {
  service: 'controller',
  syscall: 'read',
  code: 'ECONNRESET',
  errno: -104,
  name: 'Error',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.5.1',
      'Content-Length': '82',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'post',
    url: 'https://taxes.free.beeceptor.com/log-tax',
    data: '{"order_id":"651634ca16a4817fdd4e57f0","platform_code":"022","order_amount":30000}'
  },
  request: <ref *3> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [Function: handleRequestSocket]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'https:',
      path: '/log-tax',
      method: 'POST',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.5.1',
        'Content-Length': '82',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'taxes.free.beeceptor.com',
      port: '',
      agent: undefined,
      nativeProtocols: <ref *4> {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',         'BIND',       'CHECKOUT',
            'CONNECT',     'COPY',       'DELETE',
            'GET',         'HEAD',       'LINK',
            'LOCK',        'M-SEARCH',   'MERGE',
            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
            'MOVE',        'NOTIFY',     'OPTIONS',
            'PATCH',       'POST',       'PROPFIND',
            'PROPPATCH',   'PURGE',      'PUT',
            'REBIND',      'REPORT',     'SEARCH',
            'SOURCE',      'SUBSCRIBE',  'TRACE',
            'UNBIND',      'UNLINK',     'UNLOCK',
            'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: __node_internal_],
          validateHeaderValue: [Function: __node_internal_],
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'taxes.free.beeceptor.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    drain: [Function: ondrain]
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: true,
                  _parent: null,
                  _host: 'taxes.free.beeceptor.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: false,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '82',
                    _hasBody: true,
                    _trailer: '',
                    finished: true,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *1],
                    _header: 'POST /log-tax HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.5.1\r\n' +
                      'Content-Length: 82\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: taxes.free.beeceptor.com\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *2],
                    socketPath: undefined,
                    method: 'POST',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    joinDuplicateHeaders: undefined,
                    path: '/log-tax',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: null,
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'taxes.free.beeceptor.com',
                    protocol: 'https:',
                    _redirectable: [Circular *3],
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
                      'content-length': [ 'Content-Length', '82' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'taxes.free.beeceptor.com' ]
                    },
                    [Symbol(errored)]: null,
                    [Symbol(kHighWaterMark)]: 16384,
                    [Symbol(kRejectNonStandardBodyWrites)]: false,
                    [Symbol(kUniqueHeaders)]: null
                  },
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 933,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 325,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.5.1',
                      'Content-Length': '82',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'taxes.free.beeceptor.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: [Circular *4],
                    pathname: '/log-tax',
                    _defaultAgent: [Circular *2],
                    host: 'taxes.free.beeceptor.com',
                    noDelay: true,
                    servername: 'taxes.free.beeceptor.com',
                    _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/log-tax'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 82,
    _requestBodyBuffers: [
      {
        data: <Buffer 7b 22 6f 72 64 65 72 5f 69 64 22 3a 22 36 35 31 36 33 34 63 61 31 36 61 34 38 31 37 66 64 64 34 65 35 37 66 30 22 2c 22 70 6c 61 74 66 6f 72 6d 5f 63 ... 32 more bytes>,
        encoding: undefined
      }
    ],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *5> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '82',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'taxes.free.beeceptor.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          drain: [Function: ondrain]
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'taxes.free.beeceptor.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: true,
          emitClose: false,
          autoDestroy: true,
          destroyed: true,
          errored: Error: read ECONNRESET
              at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
            errno: -104,
            code: 'ECONNRESET',
            syscall: 'read'
          },
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: true,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: true,
          emitClose: false,
          autoDestroy: true,
          errored: Error: read ECONNRESET
              at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
            errno: -104,
            code: 'ECONNRESET',
            syscall: 'read'
          },
          closed: true,
          closeEmitted: true,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *5],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1],
            [Symbol(handle_onclose)]: [Function: done]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 933,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 325,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.5.1',
            'Content-Length': '82',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'taxes.free.beeceptor.com',
          port: 443,
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/log-tax',
          _defaultAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'taxes.free.beeceptor.com',
          noDelay: true,
          servername: 'taxes.free.beeceptor.com',
          _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'POST /log-tax HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.5.1\r\n' +
        'Content-Length: 82\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: taxes.free.beeceptor.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'taxes.free.beeceptor.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                drain: [Function: ondrain]
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'taxes.free.beeceptor.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: true,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: Error: read ECONNRESET
                    at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                  errno: -104,
                  code: 'ECONNRESET',
                  syscall: 'read'
                },
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: false,
                errorEmitted: true,
                emitClose: false,
                autoDestroy: true,
                errored: Error: read ECONNRESET
                    at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                  errno: -104,
                  code: 'ECONNRESET',
                  syscall: 'read'
                },
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *5],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 933,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 325,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.5.1',
                  'Content-Length': '82',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'taxes.free.beeceptor.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *2],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/log-tax',
                _defaultAgent: [Circular *2],
                host: 'taxes.free.beeceptor.com',
                noDelay: true,
                servername: 'taxes.free.beeceptor.com',
                _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
          },
          list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/log-tax',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'taxes.free.beeceptor.com',
      protocol: 'https:',
      _redirectable: [Circular *3],
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
        'content-length': [ 'Content-Length', '82' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'taxes.free.beeceptor.com' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'https://taxes.free.beeceptor.com/log-tax',
    [Symbol(kCapture)]: false
  },
  cause: Error: read ECONNRESET
      at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
    errno: -104,
    code: 'ECONNRESET',
    syscall: 'read'
  },
  stack: 'Error: read ECONNRESET\n' +
    '    at AxiosError.from (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:837:14)\n' +
    '    at RedirectableRequest.handleRequestError (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:3016:25)\n' +
    '    at RedirectableRequest.emit (node:events:514:28)\n' +
    '    at eventHandlers.<computed> (/home/musediq/Documents/duplo-backend/node_modules/follow-redirects/index.js:14:24)\n' +
    '    at ClientRequest.emit (node:events:514:28)\n' +
    '    at TLSSocket.socketErrorListener (node:_http_client:501:9)\n' +
    '    at TLSSocket.emit (node:events:514:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:151:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)',
  [Symbol(level)]: 'error',
  [Symbol(splat)]: [
    AxiosError: read ECONNRESET
        at AxiosError.from (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:837:14)
        at RedirectableRequest.handleRequestError (/home/musediq/Documents/duplo-backend/node_modules/axios/dist/node/axios.cjs:3016:25)
        at RedirectableRequest.emit (node:events:514:28)
        at eventHandlers.<computed> (/home/musediq/Documents/duplo-backend/node_modules/follow-redirects/index.js:14:24)
        at ClientRequest.emit (node:events:514:28)
        at TLSSocket.socketErrorListener (node:_http_client:501:9)
        at TLSSocket.emit (node:events:514:28)
        at emitErrorNT (node:internal/streams/destroy:151:8)
        at emitErrorCloseNT (node:internal/streams/destroy:116:3)
        at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
      syscall: 'read',
      code: 'ECONNRESET',
      errno: -104,
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: Object [AxiosHeaders] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.5.1',
          'Content-Length': '82',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://taxes.free.beeceptor.com/log-tax',
        data: '{"order_id":"651634ca16a4817fdd4e57f0","platform_code":"022","order_amount":30000}'
      },
      request: <ref *3> Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/log-tax',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.5.1',
            'Content-Length': '82',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'taxes.free.beeceptor.com',
          port: '',
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'taxes.free.beeceptor.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        drain: [Function: ondrain]
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: true,
                      _parent: null,
                      _host: 'taxes.free.beeceptor.com',
                      _closeAfterHandlingError: false,
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: true,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: true,
                        errored: Error: read ECONNRESET
                            at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                          errno: -104,
                          code: 'ECONNRESET',
                          syscall: 'read'
                        },
                        closed: true,
                        closeEmitted: true,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: false,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: false,
                        needDrain: false,
                        ending: false,
                        ended: false,
                        finished: false,
                        destroyed: true,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 0,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: true,
                        emitClose: false,
                        autoDestroy: true,
                        errored: Error: read ECONNRESET
                            at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                          errno: -104,
                          code: 'ECONNRESET',
                          syscall: 'read'
                        },
                        closed: true,
                        closeEmitted: true,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: null,
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: <ref *5> ClientRequest {
                        _events: [Object: null prototype] {
                          response: [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          abort: [Function (anonymous)],
                          aborted: [Function (anonymous)],
                          connect: [Function (anonymous)],
                          error: [Function (anonymous)],
                          socket: [Function (anonymous)],
                          timeout: [Function (anonymous)]
                        },
                        _eventsCount: 7,
                        _maxListeners: undefined,
                        outputData: [],
                        outputSize: 0,
                        writable: true,
                        destroyed: false,
                        _last: true,
                        chunkedEncoding: false,
                        shouldKeepAlive: false,
                        maxRequestsOnConnectionReached: false,
                        _defaultKeepAlive: true,
                        useChunkedEncodingByDefault: true,
                        sendDate: false,
                        _removedConnection: false,
                        _removedContLen: false,
                        _removedTE: false,
                        strictContentLength: false,
                        _contentLength: '82',
                        _hasBody: true,
                        _trailer: '',
                        finished: true,
                        _headerSent: true,
                        _closed: false,
                        socket: [Circular *1],
                        _header: 'POST /log-tax HTTP/1.1\r\n' +
                          'Accept: application/json, text/plain, */*\r\n' +
                          'Content-Type: application/json\r\n' +
                          'User-Agent: axios/1.5.1\r\n' +
                          'Content-Length: 82\r\n' +
                          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                          'Host: taxes.free.beeceptor.com\r\n' +
                          'Connection: close\r\n' +
                          '\r\n',
                        _keepAliveTimeout: 0,
                        _onPendingData: [Function: nop],
                        agent: [Circular *2],
                        socketPath: undefined,
                        method: 'POST',
                        maxHeaderSize: undefined,
                        insecureHTTPParser: undefined,
                        joinDuplicateHeaders: undefined,
                        path: '/log-tax',
                        _ended: false,
                        res: null,
                        aborted: false,
                        timeoutCb: null,
                        upgradeOrConnect: false,
                        parser: null,
                        maxHeadersCount: null,
                        reusedSocket: false,
                        host: 'taxes.free.beeceptor.com',
                        protocol: 'https:',
                        _redirectable: [Circular *3],
                        [Symbol(kCapture)]: false,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(kNeedDrain)]: false,
                        [Symbol(corked)]: 0,
                        [Symbol(kOutHeaders)]: [Object: null prototype] {
                          accept: [
                            'Accept',
                            'application/json, text/plain, */*'
                          ],
                          'content-type': [ 'Content-Type', 'application/json' ],
                          'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
                          'content-length': [ 'Content-Length', '82' ],
                          'accept-encoding': [
                            'Accept-Encoding',
                            'gzip, compress, deflate, br'
                          ],
                          host: [ 'Host', 'taxes.free.beeceptor.com' ]
                        },
                        [Symbol(errored)]: null,
                        [Symbol(kHighWaterMark)]: 16384,
                        [Symbol(kRejectNonStandardBodyWrites)]: false,
                        [Symbol(kUniqueHeaders)]: null
                      },
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1],
                          [Symbol(handle_onclose)]: [Function: done]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 933,
                      [Symbol(kHandle)]: null,
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 325,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: Infinity,
                        protocol: 'https:',
                        path: null,
                        method: 'POST',
                        headers: [Object: null prototype] {
                          Accept: 'application/json, text/plain, */*',
                          'Content-Type': 'application/json',
                          'User-Agent': 'axios/1.5.1',
                          'Content-Length': '82',
                          'Accept-Encoding': 'gzip, compress, deflate, br'
                        },
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        family: undefined,
                        beforeRedirect: [Function: dispatchBeforeRedirect],
                        beforeRedirects: { proxy: [Function: beforeRedirect] },
                        hostname: 'taxes.free.beeceptor.com',
                        port: 443,
                        agent: undefined,
                        nativeProtocols: [Circular *4],
                        pathname: '/log-tax',
                        _defaultAgent: [Circular *2],
                        host: 'taxes.free.beeceptor.com',
                        noDelay: true,
                        servername: 'taxes.free.beeceptor.com',
                        _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      }
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/log-tax'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 82,
        _requestBodyBuffers: [
          {
            data: <Buffer 7b 22 6f 72 64 65 72 5f 69 64 22 3a 22 36 35 31 36 33 34 63 61 31 36 61 34 38 31 37 66 64 64 34 65 35 37 66 30 22 2c 22 70 6c 61 74 66 6f 72 6d 5f 63 ... 32 more bytes>,
            encoding: undefined
          }
        ],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: <ref *5> ClientRequest {
          _events: [Object: null prototype] {
            response: [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: '82',
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: false,
          socket: <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'taxes.free.beeceptor.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              drain: [Function: ondrain]
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: true,
            _parent: null,
            _host: 'taxes.free.beeceptor.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: true,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: Error: read ECONNRESET
                  at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                errno: -104,
                code: 'ECONNRESET',
                syscall: 'read'
              },
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: true,
              emitClose: false,
              autoDestroy: true,
              errored: Error: read ECONNRESET
                  at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                errno: -104,
                code: 'ECONNRESET',
                syscall: 'read'
              },
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *5],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 933,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 325,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.5.1',
                'Content-Length': '82',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'taxes.free.beeceptor.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *2> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                      },
                      list: [
                        'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                      ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/log-tax',
              _defaultAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'taxes.free.beeceptor.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
                  },
                  list: [
                    'taxes.free.beeceptor.com:443:::::::::::::::::::::'
                  ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'taxes.free.beeceptor.com',
              noDelay: true,
              servername: 'taxes.free.beeceptor.com',
              _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _header: 'POST /log-tax HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'Content-Type: application/json\r\n' +
            'User-Agent: axios/1.5.1\r\n' +
            'Content-Length: 82\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: taxes.free.beeceptor.com\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'taxes.free.beeceptor.com:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'taxes.free.beeceptor.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    drain: [Function: ondrain]
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: true,
                  _parent: null,
                  _host: 'taxes.free.beeceptor.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: false,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    errored: Error: read ECONNRESET
                        at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
                      errno: -104,
                      code: 'ECONNRESET',
                      syscall: 'read'
                    },
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: [Circular *5],
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 933,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 325,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 05 1d 02 01 01 02 02 03 04 04 02 13 01 04 20 b7 c0 64 80 09 31 94 0b 45 76 9e 7e 54 8c 2a bf 3d 43 5d 1d 6a 50 34 e5 e7 eb 86 6e 47 b4 0e 1a 04 ... 1263 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.5.1',
                      'Content-Length': '82',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'taxes.free.beeceptor.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *2],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/log-tax',
                    _defaultAgent: [Circular *2],
                    host: 'taxes.free.beeceptor.com',
                    noDelay: true,
                    servername: 'taxes.free.beeceptor.com',
                    _agentKey: 'taxes.free.beeceptor.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'taxes.free.beeceptor.com:443:::::::::::::::::::::': <Buffer 30 82 05 1e 02 01 01 02 02 03 04 04 02 13 01 04 20 d7 5f 8b 52 72 13 05 43 6f e6 90 37 98 66 1b 09 e8 d4 a6 02 f2 b5 77 2f 7a 8b 33 b1 4b 1b c5 db 04 ... 1264 more bytes>
              },
              list: [ 'taxes.free.beeceptor.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'POST',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/log-tax',
          _ended: false,
          res: null,
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'taxes.free.beeceptor.com',
          protocol: 'https:',
          _redirectable: [Circular *3],
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'content-type': [ 'Content-Type', 'application/json' ],
            'user-agent': [ 'User-Agent', 'axios/1.5.1' ],
            'content-length': [ 'Content-Length', '82' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'taxes.free.beeceptor.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kHighWaterMark)]: 16384,
          [Symbol(kRejectNonStandardBodyWrites)]: false,
          [Symbol(kUniqueHeaders)]: null
        },
        _currentUrl: 'https://taxes.free.beeceptor.com/log-tax',
        [Symbol(kCapture)]: false
      },
      cause: Error: read ECONNRESET
          at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) {
        errno: -104,
        code: 'ECONNRESET',
        syscall: 'read'
      }
    }
  ],
  [Symbol(message)]: '{"cause":{"code":"ECONNRESET","errno":-104,"syscall":"read"},"code":"ECONNRESET","config":{"adapter":["xhr","http"],"data":"{\\"order_id\\":\\"651634ca16a4817fdd4e57f0\\",\\"platform_code\\":\\"022\\",\\"order_amount\\":30000}","env":{},"headers":{"Accept":"application/json, text/plain, */*","Accept-Encoding":"gzip, compress, deflate, br","Content-Length":"82","Content-Type":"application/json","User-Agent":"axios/1.5.1"},"maxBodyLength":-1,"maxContentLength":-1,"method":"post","timeout":0,"transformRequest":[null],"transformResponse":[null],"transitional":{"clarifyTimeoutError":false,"forcedJSONParsing":true,"silentJSONParsing":true},"url":"https://taxes.free.beeceptor.com/log-tax","xsrfCookieName":"XSRF-TOKEN","xsrfHeaderName":"X-XSRF-TOKEN"},"errno":-104,"level":"error","message":"read ECONNRESET","name":"Error","request":{"_currentRequest":{"_closed":false,"_contentLength":"82","_defaultKeepAlive":true,"_ended":false,"_events":{},"_eventsCount":7,"_hasBody":true,"_header":"POST /log-tax HTTP/1.1\\r\\nAccept: application/json, text/plain, */*\\r\\nContent-Type: application/json\\r\\nUser-Agent: axios/1.5.1\\r\\nContent-Length: 82\\r\\nAccept-Encoding: gzip, compress, deflate, br\\r\\nHost: taxes.free.beeceptor.com\\r\\nConnection: close\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":0,"_last":true,"_redirectable":"[Circular]","_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_trailer":"","aborted":false,"agent":{"_events":{},"_eventsCount":2,"_sessionCache":{"list":["taxes.free.beeceptor.com:443:::::::::::::::::::::"],"map":{"taxes.free.beeceptor.com:443:::::::::::::::::::::":{"data":[48,130,5,30,2,1,1,2,2,3,4,4,2,19,1,4,32,215,95,139,82,114,19,5,67,111,230,144,55,152,102,27,9,232,212,166,2,242,181,119,47,122,139,51,177,75,27,197,219,4,32,92,207,90,125,217,14,136,214,26,42,196,16,76,201,132,193,238,13,236,156,28,63,177,156,39,148,31,159,112,108,79,233,161,6,2,4,101,22,52,203,162,4,2,2,28,32,163,130,4,47,48,130,4,43,48,130,3,19,160,3,2,1,2,2,18,4,156,244,113,45,112,22,209,0,156,39,116,177,15,145,51,143,32,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,48,50,49,11,48,9,6,3,85,4,6,19,2,85,83,49,22,48,20,6,3,85,4,10,19,13,76,101,116,39,115,32,69,110,99,114,121,112,116,49,11,48,9,6,3,85,4,3,19,2,82,51,48,30,23,13,50,51,48,56,50,51,48,50,51,49,50,51,90,23,13,50,51,49,49,50,49,48,50,51,49,50,50,90,48,31,49,29,48,27,6,3,85,4,3,12,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,89,48,19,6,7,42,134,72,206,61,2,1,6,8,42,134,72,206,61,3,1,7,3,66,0,4,60,250,210,25,138,101,106,214,236,195,196,6,221,133,229,21,95,172,29,132,69,213,36,173,135,174,153,252,213,128,152,109,152,252,17,139,250,94,190,149,211,230,48,79,106,223,104,83,104,20,220,101,197,177,135,114,94,230,155,228,21,243,85,5,163,130,2,23,48,130,2,19,48,14,6,3,85,29,15,1,1,255,4,4,3,2,7,128,48,29,6,3,85,29,37,4,22,48,20,6,8,43,6,1,5,5,7,3,1,6,8,43,6,1,5,5,7,3,2,48,12,6,3,85,29,19,1,1,255,4,2,48,0,48,29,6,3,85,29,14,4,22,4,20,111,42,75,233,62,133,38,73,190,22,181,53,118,252,56,10,18,192,147,164,48,31,6,3,85,29,35,4,24,48,22,128,20,20,46,179,23,183,88,86,203,174,80,9,64,230,31,175,157,139,20,194,198,48,85,6,8,43,6,1,5,5,7,1,1,4,73,48,71,48,33,6,8,43,6,1,5,5,7,48,1,134,21,104,116,116,112,58,47,47,114,51,46,111,46,108,101,110,99,114,46,111,114,103,48,34,6,8,43,6,1,5,5,7,48,2,134,22,104,116,116,112,58,47,47,114,51,46,105,46,108,101,110,99,114,46,111,114,103,47,48,31,6,3,85,29,17,4,24,48,22,130,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,19,6,3,85,29,32,4,12,48,10,48,8,6,6,103,129,12,1,2,1,48,130,1,5,6,10,43,6,1,4,1,214,121,2,4,2,4,129,246,4,129,243,0,241,0,118,0,183,62,251,36,223,156,77,186,117,242,57,197,186,88,244,108,93,252,66,207,122,159,53,196,158,29,9,129,37,237,180,153,0,0,1,138,32,114,107,85,0,0,4,3,0,71,48,69,2,32,119,232,84,222,53,144,92,227,2,245,16,108,137,212,141,78,67,64,152,104,130,196,44,227,225,101,2,84,247,74,57,206,2,33,0,201,249,59,88,108,225,244,177,243,78,16,97,102,20,117,57,210,52,198,152,11,250,133,48,253,49,75,185,99,206,172,234,0,119,0,232,62,208,218,62,245,6,53,50,231,87,40,188,137,107,201,3,211,203,209,17,107,236,235,105,225,119,125,109,6,189,110,0,0,1,138,32,114,107,93,0,0,4,3,0,72,48,70,2,33,0,198,110,150,186,38,132,153,49,178,64,115,210,22,170,230,166,66,101,129,63,186,44,99,4,117,241,57,13,244,245,19,246,2,33,0,151,177,220,79,34,124,236,6,226,139,179,48,194,160,36,20,198,230,15,235,93,250,37,126,241,216,25,93,155,23,188,200,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,3,130,1,1,0,162,129,174,35,151,50,62,104,88,87,210,124,171,23,245,26,241,78,55,107,120,143,8,191,22,37,112,118,205,147,99,121,150,254,100,76,32,196,78,16,44,107,5,168,117,72,137,157,254,124,17,64,7,93,74,183,15,162,162,252,240,167,34,41,60,50,102,228,221,230,111,23,134,51,139,127,87,227,136,226,72,246,105,79,150,119,96,188,36,64,193,146,252,179,97,238,234,70,81,134,119,181,118,191,146,88,139,212,106,84,37,210,231,201,11,218,77,90,110,211,58,246,199,208,11,62,144,203,246,79,165,210,221,214,117,215,112,45,149,141,117,221,21,251,101,78,62,42,68,96,113,208,55,10,206,238,171,186,123,121,165,100,188,42,20,136,165,31,75,10,183,176,68,194,205,231,106,47,73,190,230,88,193,28,10,230,184,140,63,229,172,140,24,155,184,206,167,165,32,112,27,99,253,245,233,41,133,146,205,120,210,25,193,99,139,221,101,173,58,121,222,110,124,159,183,176,226,172,168,156,231,217,197,78,24,198,10,40,217,182,80,91,12,7,161,96,72,195,135,231,199,13,243,171,118,171,164,2,4,0,169,5,2,3,9,58,128,170,115,4,113,251,212,143,98,68,233,118,146,216,120,36,170,87,114,15,61,251,17,63,53,211,152,101,20,14,211,72,36,191,44,142,192,137,43,71,185,26,217,184,64,147,224,21,138,69,148,11,123,194,192,240,150,31,13,16,28,29,12,37,171,111,230,235,80,169,47,129,2,147,0,194,250,183,126,188,214,116,59,3,195,157,100,55,108,193,181,231,200,36,26,117,37,174,101,14,218,51,95,160,13,94,166,193,138,65,7,172,228,9,239,240,47,46,174,7,2,5,0,200,29,233,253,179,3,2,1,29],"type":"Buffer"}}},"defaultPort":443,"freeSockets":{},"keepAlive":false,"keepAliveMsecs":1000,"maxCachedSessions":100,"maxFreeSockets":256,"maxSockets":null,"maxTotalSockets":null,"options":{"noDelay":true,"path":null},"protocol":"https:","requests":{},"scheduling":"lifo","sockets":{"taxes.free.beeceptor.com:443:::::::::::::::::::::":[{"_SNICallback":null,"_closeAfterHandlingError":false,"_controlReleased":true,"_events":{"close":[null,null,null,null]},"_eventsCount":10,"_hadError":true,"_host":"taxes.free.beeceptor.com","_httpMessage":"[Circular]","_newSessionPending":false,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":true,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":true,"closed":true,"constructed":true,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":true,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":true,"errored":{"code":"ECONNRESET","errno":-104,"syscall":"read"},"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_rejectUnauthorized":true,"_requestCert":true,"_secureEstablished":true,"_securePending":false,"_server":null,"_sockname":null,"_tlsOptions":{"isServer":false,"pipe":false,"rejectUnauthorized":true,"requestCert":true,"secureContext":{"context":{}},"session":{"data":[48,130,5,29,2,1,1,2,2,3,4,4,2,19,1,4,32,183,192,100,128,9,49,148,11,69,118,158,126,84,140,42,191,61,67,93,29,106,80,52,229,231,235,134,110,71,180,14,26,4,32,124,174,151,4,211,222,122,202,199,162,195,38,53,184,133,9,156,215,249,106,178,225,191,181,195,230,102,215,209,227,170,237,161,6,2,4,101,22,52,160,162,4,2,2,28,32,163,130,4,47,48,130,4,43,48,130,3,19,160,3,2,1,2,2,18,4,156,244,113,45,112,22,209,0,156,39,116,177,15,145,51,143,32,48,13,6,9,42,134,72,134,247,13,1,1,11,5,0,48,50,49,11,48,9,6,3,85,4,6,19,2,85,83,49,22,48,20,6,3,85,4,10,19,13,76,101,116,39,115,32,69,110,99,114,121,112,116,49,11,48,9,6,3,85,4,3,19,2,82,51,48,30,23,13,50,51,48,56,50,51,48,50,51,49,50,51,90,23,13,50,51,49,49,50,49,48,50,51,49,50,50,90,48,31,49,29,48,27,6,3,85,4,3,12,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,89,48,19,6,7,42,134,72,206,61,2,1,6,8,42,134,72,206,61,3,1,7,3,66,0,4,60,250,210,25,138,101,106,214,236,195,196,6,221,133,229,21,95,172,29,132,69,213,36,173,135,174,153,252,213,128,152,109,152,252,17,139,250,94,190,149,211,230,48,79,106,223,104,83,104,20,220,101,197,177,135,114,94,230,155,228,21,243,85,5,163,130,2,23,48,130,2,19,48,14,6,3,85,29,15,1,1,255,4,4,3,2,7,128,48,29,6,3,85,29,37,4,22,48,20,6,8,43,6,1,5,5,7,3,1,6,8,43,6,1,5,5,7,3,2,48,12,6,3,85,29,19,1,1,255,4,2,48,0,48,29,6,3,85,29,14,4,22,4,20,111,42,75,233,62,133,38,73,190,22,181,53,118,252,56,10,18,192,147,164,48,31,6,3,85,29,35,4,24,48,22,128,20,20,46,179,23,183,88,86,203,174,80,9,64,230,31,175,157,139,20,194,198,48,85,6,8,43,6,1,5,5,7,1,1,4,73,48,71,48,33,6,8,43,6,1,5,5,7,48,1,134,21,104,116,116,112,58,47,47,114,51,46,111,46,108,101,110,99,114,46,111,114,103,48,34,6,8,43,6,1,5,5,7,48,2,134,22,104,116,116,112,58,47,47,114,51,46,105,46,108,101,110,99,114,46,111,114,103,47,48,31,6,3,85,29,17,4,24,48,22,130,20,42,46,102,114,101,101,46,98,101,101,99,101,112,116,111,114,46,99,111,109,48,19,6,3,85,29,32,4,12,48,10,48,8,6,6,103,129,12,1,2,1,48,130,1,5,6,10,43,6,1,4,1,214,121,2,4,2,4,129,246,4,129,243,0,241,0,118,0,183,62,251,36,223,156,77,186,117,242,57,197,186,88,244,108,93,252,66,207,122,159,53,196,158,29,9,129,37,237,180,153,0,0,1,138,32,114,107,85,0,0,4,3,0,71,48,69,2,32,119,232,84,222,53,144,92,227,2,245,16,108,137,212,141,78,67,64,152,104,130,196,44,227,225,101,2,84,247,74,57,206,2,33,0,201,249,59,88,108,225,244,177,243,78,16,97,102,20,117,57,210,52,198,152,11,250,133,48,253,49,75,185,99,206,172,234,0,119,0,232,62,208,218,62,245,6,53,50,231,87,40,188,137,107,201,3,211,203,209,17,107,236,235,105,225,119,125,109,6,189,110,0,0,1,138,32,11'... 26250 more characters
}
2023-09-29 03:24:40 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-29 03:24:40"}'
}
2023-09-29 03:24:40 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-29 03:24:40"}'
}
2023-09-29 03:49:04 info: Tax data logged successfully {
  service: 'controller',
  data: {},
  [Symbol(level)]: 'info',
  [Symbol(splat)]: [ { message: 'Tax data logged successfully', data: {} } ],
  [Symbol(message)]: '{"data":{},"level":"info","message":"Tax data logged successfully","service":"controller","timestamp":"2023-09-29 03:49:04"}'
}
2023-09-29 03:49:04 info: Order processed successfully {
  service: 'controller',
  [Symbol(level)]: 'info',
  [Symbol(message)]: '{"level":"info","message":"Order processed successfully","service":"controller","timestamp":"2023-09-29 03:49:04"}'
}
